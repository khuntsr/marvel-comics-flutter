using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

namespace CRM.Web.Helpers
{
    public static class CacheFunctions
    {
        private static HttpContext HttpContext => new HttpContextAccessor().HttpContext!;

        public static void SetSession(string key, string value)
        {
            HttpContext.Session.SetString(key, value);
        }

        public static string GetSession(string key)
        {
            return HttpContext.Session.GetString(key)!;
        }

        public static void RemoveSession(string key)
        {
            HttpContext.Session.Remove(key);
        }

        public static void SetSuccess(string value)
        {
            SetSession("Success", value);
        }

        public static string GetSuccess()
        {
            return GetSession("Success");
        }

        public static void RemoveSuccess()
        {
            RemoveSession("Success");
        }

        public static void SetError(string value)
        {
            SetSession("Error", value);
        }

        public static string GetError()
        {
            return GetSession("Error");
        }

        public static void RemoveError()
        {
            RemoveSession("Error");
        }

        public static void SetWarning(string value)
        {
            SetSession("Warning", value);
        }

        public static string GetWarning()
        {
            return GetSession("Warning");
        }

        public static void RemoveWarning()
        {
            RemoveSession("Warning");
        }

        public static void RemoveAllSession()
        {
            HttpContext.Session.Clear();
        }

        public static T GetModelFromState<T>(this Controller instance)
        {
            var name = typeof(T).Name;

            if (instance.TempData[name] != null)
                return JsonConvert.DeserializeObject<T>(Convert.ToString(instance.TempData[name])!)!;

            return default!;
        }

        public static void SetModelState<T>(this Controller instance, object data)
        {
            var name = typeof(T).Name;
            instance.TempData[name] = JsonConvert.SerializeObject(data);
        }
    }
}
function notifySuccess(message) {
    $.toast({
        text: '<i class="jq-toast-icon bi bi-check-circle"></i><p>' + message + '</p>',
        position: 'top-center',
        loaderBg: '#b6e9c5',
        class: 'jq-has-icon jq-toast-success',
        hideAfter: 3500,
        stack: 6,
        showHideTransition: 'fade'
    });
}

function notifyError(message) {
    $.toast({
        text: '<i class="jq-toast-icon bi bi-bug-fill"></i><p>' + message + '</p>',
        position: 'top-center',
        loaderBg: '#FD7972',
        class: 'jq-has-icon jq-toast-danger',
        hideAfter: 3500,
        stack: 6,
        showHideTransition: 'fade'
    });
}

function notifyWarning(message) {
    $.toast({
        text: '<i class="jq-toast-icon bi bi-warning"></i><p>' + message + '</p>',
        position: 'top-center',
        loaderBg: '#FFD240',
        class: 'jq-has-icon jq-toast-warning',
        hideAfter: 3500,
        stack: 6,
        showHideTransition: 'fade'
    });
}
		
		@{
    Layout = null;
}

<input type="hidden" value="@CacheFunctions.GetSuccess()" id="msgSuccess" />
<input type="hidden" value="@CacheFunctions.GetError()" id="msgError" />
<input type="hidden" value="@CacheFunctions.GetWarning()" id="msgWarning" />

@{
    CacheFunctions.RemoveSuccess();
    CacheFunctions.RemoveError();
    CacheFunctions.RemoveWarning();
}
